!function(){"use strict";const e={formSelector:".form",inputSelector:".form__input",submitButtonSelector:".form__button",inactiveButtonClass:"form__button_disabled",inputErrorClass:"form__input_type_error",errorClass:"form__input_error_visible"},t=document.querySelector(".edit-popup"),s=document.querySelector(".add-popup"),n=document.querySelector(".profile__edit-button"),i=document.querySelector(".profile__add-button"),o=t.querySelector(".form__input[name='name']"),r=t.querySelector(".form__input[name='title']");function l(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}class a{constructor(e,t,s){l(this,"_handlePlaceDelete",(()=>{this._element.remove(),this._element=null})),l(this,"_toggleCardLike",(()=>{this._element.querySelector(".place__like-button").classList.toggle("place__like-button_active")})),this._name=e.name,this._link=e.link,this._cardSelector=t,this._handleCardClick=s}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".place").cloneNode(!0)}generateCard(){this._element=this._getTemplate(),this._placeImage=this._element.querySelector(".place__image");const e=this._element.querySelector(".place__title");return this._placeImage.src=this._link,this._placeImage.alt="Photo of ".concat(this._name),e.textContent=this._name,this._setEventListeners(),this._element}_setEventListeners(){const e=this._element.querySelector(".place__like-button"),t=this._element.querySelector(".place__delete_button");e.addEventListener("click",this._toggleCardLike),t.addEventListener("click",(()=>this._handlePlaceDelete())),this._placeImage.addEventListener("click",(()=>this._handleCardClick()))}}class u{constructor(e,t){this._form=t,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass}_hasInvalidInput(){return this._inputsList.every((e=>e.validity.valid))}_toggleButton(){this._hasInvalidInput()?this._enableButton():this._disableButton()}_enableButton(){this._button.disabled=!1,this._button.classList.remove(this._inactiveButtonClass)}_disableButton(){this._button.disabled=!0,this._button.classList.add(this._inactiveButtonClass)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_showInputError(e){const t=this._form.querySelector("#".concat(e.id,"-error"));e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=document.querySelector("#".concat(e.id,"-error"));e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_setEventListeners(){this._inputsList=Array.from(this._form.querySelectorAll(this._inputSelector)),this._button=this._form.querySelector(this._submitButtonSelector),this._toggleButton(),this._inputsList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButton()}))}))}enableValidation(){this._form.addEventListener("submit",(e=>e.preventDefault())),this._setEventListeners()}resetValidation(){this._toggleButton(),this._inputsList.forEach((e=>{this._hideInputError(e)}))}}function c(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}class p{constructor(e){c(this,"_handleEscClose",(e=>{"Escape"==e.key&&this.close()})),c(this,"_handleOverlayClick",(e=>{e.target===e.currentTarget&&this.close()})),this._popupElement=document.querySelector(e)}open(){this._popupElement.classList.add("popup__active"),document.addEventListener("keydown",this._handleEscClose),this._popupElement.addEventListener("mousedown",this._handleOverlayClick)}close(){this._popupElement.classList.remove("popup__active"),document.removeEventListener("keydown",this._handleEscClose),this._popupElement.removeEventListener("mousedown",this._handleOverlayClick)}setEventListeners(){this._popupElement.querySelector(".popup__close-button").addEventListener("mousedown",(()=>this.close()))}}class _ extends p{constructor(e,t){super(e),this._handleSubmit=t}_getInputValues(){this._inputsList=[...this._popupElement.querySelectorAll(".form__input")];const e={};return this._inputsList.forEach((t=>{e[t.name]=t.value})),e}setEventListeners(){this._popupElement.addEventListener("submit",(e=>{e.preventDefault(),this._handleSubmit(this._getInputValues()),this.close(),this._popupElement.querySelector(".form").reset()})),super.setEventListeners()}close(){super.close()}}const h=e=>{const t=(e=>new a(e,"#place-template",(()=>b.open(e.link,e.name))).generateCard())(e);d.addItem(t)},d=new class{constructor(e,t){let{items:s,renderer:n}=e;this._items=s,this._renderer=n,this._container=document.querySelector(t)}renderer(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}({items:[{name:"Antelope Canyon",link:"https://images.unsplash.com/photo-1527285489-efa8f4ea8b0c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=735&q=80"},{name:"Salt Creek Falls",link:"https://images.unsplash.com/photo-1494472155656-f34e81b17ddc?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=688&q=80"},{name:"Truckee",link:"https://images.unsplash.com/photo-1516683179282-b7f603ab6eba?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=764&q=80"},{name:"Lake Powell",link:"https://images.unsplash.com/photo-1516557139510-13450f7d3124?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=687&q=80"},{name:"Grand Canyon Village",link:"https://images.unsplash.com/photo-1482709746041-1adc5a8aef00?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1170&q=80"},{name:"Miami Beach",link:"https://images.unsplash.com/photo-1605723517503-3cadb5818a0c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1170&q=80"}],renderer:h},".places__list"),m=new _(".edit-popup",(e=>y.setUserInfo(e.name,e.title))),f=new _(".add-popup",(e=>{h(e),E.resetValidation()})),b=new class extends p{constructor(e){super(e)}open(e,t){this._popupImage=this._popupElement.querySelector(".popup__image");const s=this._popupElement.querySelector(".popup__caption");this._popupImage.src=e,this._popupImage.alt="Photo of ".concat(t),s.textContent=t,super.setEventListeners(),super.open()}}(".image-popup"),v=new u(e,t),E=new u(e,s),y=new class{constructor(e){let{nameSelector:t,jobSelector:s}=e;this._userName=document.querySelector(t),this._userJob=document.querySelector(s)}getUserInfo(){return{name:this._userName.textContent,job:this._userJob.textContent}}setUserInfo(e,t){this._userName.textContent=e,this._userJob.textContent=t}}({nameSelector:".profile__name",jobSelector:".profile__title"});d.renderer(),m.setEventListeners(),f.setEventListeners(),v.enableValidation(),E.enableValidation(),n.addEventListener("click",(()=>{v.resetValidation(),m.open(),(()=>{const e=y.getUserInfo();o.value=e.name,r.value=e.job})()})),i.addEventListener("click",(()=>{E.resetValidation(),f.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,