!function(){"use strict";document.querySelector(".edit-popup"),document.querySelector(".add-popup"),document.querySelector(".avatar-popup");const e=document.querySelector(".profile__edit-button"),t=document.querySelector(".profile__add-button"),s=document.querySelector(".profile__image-container");class n{constructor(e,t,s){let{data:n,handleCardClick:i,handleDeleteCard:r,handleCardlike:o}=e;var a,l;l=()=>{this._element.remove(),this._element=null},(a="deleteCard")in this?Object.defineProperty(this,a,{value:l,enumerable:!0,configurable:!0,writable:!0}):this[a]=l,this._name=n.name,this._link=n.link,this._templateSelector=t,this._handleCardClick=i,this._handleDeleteCard=r,this._handleCardlike=o,this._id=n._id,this._likes=n.likes,this._userId=s,this._ownerId=n.owner._id}_getTemplate(){return document.querySelector(this._templateSelector).content.querySelector(".place").cloneNode(!0)}generateCard(){this._element=this._getTemplate(),this._placeImage=this._element.querySelector(".place__image");const e=this._element.querySelector(".place__title");return this._likeCounter=this._element.querySelector(".place__likes-count"),this._likeButton=this._element.querySelector(".place__like-button"),this._placeImage.src=this._link,this._placeImage.alt="Photo of ".concat(this._name),e.textContent=this._name,this._element.querySelector(".place__likes-count").textContent=this._likes.length,this._userId!==this._ownerId&&(this._element.querySelector(".place__delete_button").style.display="none"),this.updateLikes(this._likes),this._setEventListeners(),this._element}_setEventListeners(){this._element.querySelector(".place__like-button").addEventListener("click",(()=>this._handleCardlike(this._id))),this._element.querySelector(".place__delete_button").addEventListener("click",(()=>this._handleDeleteCard(this._id))),this._placeImage.addEventListener("click",(()=>this._handleCardClick()))}updateLikes(e){this._likes=e,this._likeCounter.textContent=this._likes.length,this.isLiked()?this._likeButton.classList.add("place__like-button_active"):this._likeButton.classList.remove("place__like-button_active")}isLiked(){return this._likes.some((e=>e._id===this._userId))}}class i{constructor(e,t){this._form=t,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass}_hasInvalidInput(){return this._inputsList.every((e=>e.validity.valid))}_toggleButton(){this._hasInvalidInput()?this._enableButton():this._disableButton()}_enableButton(){this._button.disabled=!1,this._button.classList.remove(this._inactiveButtonClass)}_disableButton(){this._button.disabled=!0,this._button.classList.add(this._inactiveButtonClass)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_showInputError(e){const t=this._form.querySelector("#".concat(e.id,"-error"));e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=document.querySelector("#".concat(e.id,"-error"));e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_setEventListeners(){this._inputsList=Array.from(this._form.querySelectorAll(this._inputSelector)),this._button=this._form.querySelector(this._submitButtonSelector),this._toggleButton(),this._inputsList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButton()}))}))}enableValidation(){this._form.addEventListener("submit",(e=>e.preventDefault())),this._setEventListeners()}resetValidation(){this._toggleButton(),this._inputsList.forEach((e=>{this._hideInputError(e)}))}}function r(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}class o{constructor(e){r(this,"_handleEscClose",(e=>{"Escape"==e.key&&this.close()})),r(this,"_handleOverlayClick",(e=>{e.target===e.currentTarget&&this.close()})),this._popupElement=document.querySelector(e),this._submitButton=this._popupElement.querySelector(".form__button"),this._submitButton&&(this._submitButtonText=this._submitButton.textContent)}open(){this._popupElement.classList.add("popup__active"),document.addEventListener("keydown",this._handleEscClose),this._popupElement.addEventListener("mousedown",this._handleOverlayClick)}close(){this._popupElement.classList.remove("popup__active"),document.removeEventListener("keydown",this._handleEscClose),this._popupElement.removeEventListener("mousedown",this._handleOverlayClick)}handleLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._submitButton&&(this._submitButton.textContent=e?t:this._submitButtonText)}setEventListeners(){this._popupElement.querySelector(".popup__close-button").addEventListener("mousedown",(()=>this.close()))}}class a extends o{constructor(e,t){super(e),this._handleSubmit=t,this._inputsList=[...this._popupElement.querySelectorAll(".form__input")],this._formElement=this._popupElement.querySelector(".form")}_getInputValues(){const e={};return this._inputsList.forEach((t=>{e[t.name]=t.value})),e}setInputValues(e){this._inputsList.forEach((t=>{t.value=e[t.name]}))}setEventListeners(){this._popupElement.addEventListener("submit",(e=>{e.preventDefault(),this._handleSubmit(this._getInputValues())})),super.setEventListeners()}close(){super.close(),this._formElement.reset()}}const l=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}_checkResponse(e){return e.ok?e.json():Promise.reject(e.statusText)}getInitialCards(){return fetch("".concat(this._baseUrl,"/cards"),{headers:this._headers}).then(this._checkResponse)}getUserInfo(){return fetch("".concat(this._baseUrl,"/users/me"),{headers:this._headers}).then(this._checkResponse)}setUserInfo(e,t){return fetch("".concat(this._baseUrl,"/users/me"),{headers:this._headers,method:"PATCH",body:JSON.stringify({name:e,about:t})}).then(this._checkResponse)}setUserAvatar(e){return fetch("".concat(this._baseUrl,"/users/me/avatar"),{headers:this._headers,method:"PATCH",body:JSON.stringify({avatar:e})}).then(this._checkResponse)}createCard(e){return fetch("".concat(this._baseUrl,"/cards"),{headers:this._headers,method:"POST",body:JSON.stringify(e)}).then(this._checkResponse)}deleteCard(e){return fetch("".concat(this._baseUrl,"/cards/").concat(e),{headers:this._headers,method:"DELETE"}).then(this._checkResponse)}toggleLike(e,t){let s;return s=t?"DELETE":"PUT",fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{headers:this._headers,method:s}).then(this._checkResponse)}}({baseUrl:"https://around.nomoreparties.co/v1/cohort-3-en",headers:{authorization:"a987f557-c5fc-4df9-a055-4063817e4bf0","Content-Type":"application/json"}});let c;Promise.all([l.getInitialCards(),l.getUserInfo()]).then((e=>{let[t,s]=e;var n;c=s._id,_.renderer(t),n=s,u.setUserInfo(n.name,n.about),u.setUserImage(n.avatar)})).catch((e=>console.log(e)));const h=e=>{const t=(e=>{const t=new n({data:e,handleCardClick:()=>p.open(e),handleDeleteCard:e=>{d.open(),d.setAction((()=>{d.handleLoading(!0,"Deleting..."),l.deleteCard(e).then((()=>{t.deleteCard(),d.close()})).catch((e=>console.log("error",e))).finally((()=>d.handleLoading(!1)))}))},handleCardlike:e=>{const s=t.isLiked();l.toggleLike(e,s).then((e=>{t.updateLikes(e.likes)})).catch((e=>console.log(e)))}},"#place-template",c);return t.generateCard()})(e);_.addItem(t)},u=new class{constructor(e){let{nameSelector:t,jobSelector:s,imageSelector:n}=e;this._userName=document.querySelector(t),this._userJob=document.querySelector(s),this._userImage=document.querySelector(n)}getUserInfo(){return{name:this._userName.textContent,job:this._userJob.textContent}}setUserInfo(e,t){this._userName.textContent=e,this._userJob.textContent=t}setUserImage(e){this._userImage.src=e}setImageVisible(){this._userImage.style.visibility="visible"}}({nameSelector:".profile__name",jobSelector:".profile__title",imageSelector:".profile__image"}),_=new class{constructor(e,t){let{renderer:s}=e;this._renderer=s,this._container=document.querySelector(t)}renderer(e){e.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}({renderer:h},".places__list"),d=new class extends o{setAction(e){this._handleSubmit=e}setEventListeners(){this._popupElement.addEventListener("submit",(e=>{e.preventDefault(),this._handleSubmit()})),super.setEventListeners()}}(".delete-popup"),p=new class extends o{constructor(e){super(e),this._popupImage=this._popupElement.querySelector(".popup__image")}open(e){const t=this._popupElement.querySelector(".popup__caption");this._popupImage.src=e.link,this._popupImage.alt="Photo of ".concat(e.name),t.textContent=e.name,super.open()}}(".image-popup"),m=new a(".avatar-popup",(e=>{m.handleLoading(!0),l.setUserAvatar(e.avatar).then((()=>{u.setUserImage(e.avatar),m.close()})).catch((e=>console.log(e))).finally((()=>m.handleLoading(!1)))})),v=new a(".add-popup",(e=>{v.handleLoading(!0,"Creating..."),l.createCard(e).then((e=>{h(e),v.close()})).catch((e=>console.log(e))).finally((()=>v.handleLoading(!1)))})),b=new a(".edit-popup",(e=>{b.handleLoading(!0),l.setUserInfo(e.name,e.job).then((()=>{u.setUserInfo(e.name,e.job),b.close()})).catch((e=>console.log(e))).finally((()=>b.handleLoading(!1)))})),g={};var f;f={formSelector:".form",inputSelector:".form__input",submitButtonSelector:".form__button",inactiveButtonClass:"form__button_disabled",inputErrorClass:"form__input_type_error",errorClass:"form__input_error_visible"},Array.from(document.querySelectorAll(f.formSelector)).forEach((e=>{const t=new i(f,e),s=e.getAttribute("name");g[s]=t,t.enableValidation()})),b.setEventListeners(),v.setEventListeners(),d.setEventListeners(),m.setEventListeners(),e.addEventListener("click",(()=>{g["edit-form"].resetValidation(),b.open(),b.setInputValues(u.getUserInfo())})),t.addEventListener("click",(()=>{g["add-form"].resetValidation(),v.open()})),s.addEventListener("click",(()=>{g["edit-avatar-form"].resetValidation(),m.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,