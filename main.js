!function(){"use strict";const e={formSelector:".form",inputSelector:".form__input",submitButtonSelector:".form__button",inactiveButtonClass:"form__button_disabled",inputErrorClass:"form__input_type_error",errorClass:"form__input_error_visible"},t=document.querySelector(".edit-popup"),s=document.querySelector(".add-popup"),n=document.querySelector(".avatar-popup"),i=document.querySelector(".profile__edit-button"),r=document.querySelector(".profile__add-button"),o=document.querySelector(".profile__image-container"),a=t.querySelector(".form__input[name='name']"),l=t.querySelector(".form__input[name='title']");class c{constructor(e,t){let{data:s,handleCardClick:n,handleDeleteCard:i,handleCardlike:r}=e;var o,a;a=()=>{this._element.remove(),this._element=null},(o="deleteCard")in this?Object.defineProperty(this,o,{value:a,enumerable:!0,configurable:!0,writable:!0}):this[o]=a,this._name=s.name,this._link=s.link,this._handleCardClick=n,this._handleDeleteCard=i,this._handleCardlike=r,this._id=s._id,this._likes=s.likes,this._userId=t,this._ownerId=s.owner._id}_getTemplate(){return document.querySelector("#place-template").content.querySelector(".place").cloneNode(!0)}generateCard(){this._element=this._getTemplate(),this._placeImage=this._element.querySelector(".place__image");const e=this._element.querySelector(".place__title");return this._placeImage.src=this._link,this._placeImage.alt="Photo of ".concat(this._name),e.textContent=this._name,this._element.querySelector(".place__likes-count").textContent=this._likes.length,this._userId!==this._ownerId&&(this._element.querySelector(".place__delete_button").style.display="none"),this.updateLikes(this._likes),this._setEventListeners(),this._element}_setEventListeners(){this._element.querySelector(".place__like-button").addEventListener("click",(()=>this._handleCardlike(this._id))),this._element.querySelector(".place__delete_button").addEventListener("click",(()=>this._handleDeleteCard(this._id))),this._placeImage.addEventListener("click",(()=>this._handleCardClick()))}updateLikes(e){this._likes=e,this._element.querySelector(".place__likes-count").textContent=this._likes.length,this.isLiked()?this._element.querySelector(".place__like-button").classList.add("place__like-button_active"):this._element.querySelector(".place__like-button").classList.remove("place__like-button_active")}isLiked(){return this._likes.some((e=>e._id===this._userId))}}class h{constructor(e,t){this._form=t,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass}_hasInvalidInput(){return this._inputsList.every((e=>e.validity.valid))}_toggleButton(){this._hasInvalidInput()?this._enableButton():this._disableButton()}_enableButton(){this._button.disabled=!1,this._button.classList.remove(this._inactiveButtonClass)}_disableButton(){this._button.disabled=!0,this._button.classList.add(this._inactiveButtonClass)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_showInputError(e){const t=this._form.querySelector("#".concat(e.id,"-error"));e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=document.querySelector("#".concat(e.id,"-error"));e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_setEventListeners(){this._inputsList=Array.from(this._form.querySelectorAll(this._inputSelector)),this._button=this._form.querySelector(this._submitButtonSelector),this._toggleButton(),this._inputsList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButton()}))}))}enableValidation(){this._form.addEventListener("submit",(e=>e.preventDefault())),this._setEventListeners()}resetValidation(){this._toggleButton(),this._inputsList.forEach((e=>{this._hideInputError(e)}))}}function u(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}class _{constructor(e){u(this,"_handleEscClose",(e=>{"Escape"==e.key&&this.close()})),u(this,"_handleOverlayClick",(e=>{e.target===e.currentTarget&&this.close()})),this._popupElement=document.querySelector(e),this._submitButton=document.querySelector(".form__button"),this._submitButtonText=this._submitButton.textContent}open(){this._popupElement.classList.add("popup__active"),document.addEventListener("keydown",this._handleEscClose),this._popupElement.addEventListener("mousedown",this._handleOverlayClick)}close(){this._popupElement.classList.remove("popup__active"),document.removeEventListener("keydown",this._handleEscClose),this._popupElement.removeEventListener("mousedown",this._handleOverlayClick)}handleLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._submitButton.textContent=e?t:this._submitButtonText}setEventListeners(){this._popupElement.querySelector(".popup__close-button").addEventListener("mousedown",(()=>this.close()))}}class d extends _{constructor(e,t){super(e),this._handleSubmit=t}_getInputValues(){this._inputsList=[...this._popupElement.querySelectorAll(".form__input")];const e={};return this._inputsList.forEach((t=>{e[t.name]=t.value})),e}setEventListeners(){this._popupElement.addEventListener("submit",(e=>{e.preventDefault(),this._handleSubmit(this._getInputValues()),this.close(),this._popupElement.querySelector(".form").reset()})),super.setEventListeners()}close(){super.close()}}const p=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}_checkResponse(e){return e.ok?e.json():Promise.reject(e.statusText)}getInitialCards(){return fetch("".concat(this._baseUrl,"/cards"),{headers:this._headers}).then(this._checkResponse)}getUserInfo(){return fetch("".concat(this._baseUrl,"/users/me"),{headers:this._headers}).then(this._checkResponse)}setUserInfo(e,t){return fetch("".concat(this._baseUrl,"/users/me"),{headers:this._headers,method:"PATCH",body:JSON.stringify({name:e,about:t})}).then(this._checkResponse)}setUserAvatar(e){return fetch("".concat(this._baseUrl,"/users/me/avatar"),{headers:this._headers,method:"PATCH",body:JSON.stringify({avatar:e})}).then(this._checkResponse)}createCard(e){return fetch("".concat(this._baseUrl,"/cards"),{headers:this._headers,method:"POST",body:JSON.stringify(e)}).then(this._checkResponse)}deleteCard(e){return fetch("".concat(this._baseUrl,"/cards/").concat(e),{headers:this._headers,method:"DELETE"}).then(this._checkResponse)}toggleLike(e,t){let s;return s=t?"DELETE":"PUT",fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{headers:this._headers,method:s}).then(this._checkResponse)}}({baseUrl:"https://around.nomoreparties.co/v1/cohort-3-en",headers:{authorization:"a987f557-c5fc-4df9-a055-4063817e4bf0","Content-Type":"application/json"}});let m;Promise.all([p.getInitialCards(),p.getUserInfo()]).then((e=>{let[t,s]=e;var n;m=s._id,g.renderer(t),n=s,b.setUserInfo(n.name,n.about),b.setUserImage(n.avatar)}));const v=e=>{const t=(e=>{const t=new c({data:e,handleCardClick:()=>E.open(e),handleDeleteCard:e=>{f.open(),f.setAction((()=>{p.deleteCard(e).then(f.handleLoading(!0,"Deleting...")).catch((e=>console.log(e))).finally(f.handleLoading(!1)),t.deleteCard()}))},handleCardlike:e=>{const s=t.isLiked();p.toggleLike(e,s).then((e=>{t.updateLikes(e.likes)}))}},m);return t.generateCard()})(e);g.addItem(t)},b=new class{constructor(e){let{nameSelector:t,jobSelector:s,imageSelector:n}=e;this._userName=document.querySelector(t),this._userJob=document.querySelector(s),this._userImage=document.querySelector(n)}getUserInfo(){return{name:this._userName.textContent,job:this._userJob.textContent}}setUserInfo(e,t){this._userName.textContent=e,this._userJob.textContent=t}setUserImage(e){this._userImage.src=e}setImageVisible(){this._userImage.style.visibility="visible"}}({nameSelector:".profile__name",jobSelector:".profile__title",imageSelector:".profile__image"}),g=new class{constructor(e,t){let{renderer:s}=e;this._renderer=s,this._container=document.querySelector(t)}renderer(e){e.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}({renderer:v},".places__list"),f=new class extends _{setAction(e){this._handleSubmit=e}setEventListeners(){this._popupElement.addEventListener("submit",(e=>{e.preventDefault(),this._handleSubmit(),this.close()})),super.setEventListeners()}}(".delete-popup"),E=new class extends _{constructor(e){super(e)}open(e){this._popupImage=this._popupElement.querySelector(".popup__image");const t=this._popupElement.querySelector(".popup__caption");this._popupImage.src=e.link,this._popupImage.alt="Photo of ".concat(e.name),t.textContent=e.name,super.setEventListeners(),super.open()}}(".image-popup"),y=new d(".avatar-popup",(e=>{y.handleLoading(!0),p.setUserAvatar(e.avatar).then(b.setUserImage(e.avatar)).catch((e=>console.log(e))).finally(y.handleLoading(!1))})),L=new d(".add-popup",(e=>{p.createCard(e).then((e=>{L.handleLoading(!0),v(e),S.resetValidation()})).catch((e=>console.log(e))).finally(L.handleLoading(!1))})),C=new d(".edit-popup",(e=>{C.handleLoading(!0),p.setUserInfo(e.name,e.title).then(b.setUserInfo(e.name,e.title)).catch((e=>console.log(e))).finally(C.handleLoading(!1))})),k=new h(e,t),S=new h(e,s),I=new h(e,n);C.setEventListeners(),L.setEventListeners(),f.setEventListeners(),y.setEventListeners(),k.enableValidation(),S.enableValidation(),I.enableValidation(),i.addEventListener("click",(()=>{k.resetValidation(),C.open(),(()=>{const e=b.getUserInfo();a.value=e.name,l.value=e.job})()})),r.addEventListener("click",(()=>{S.resetValidation(),L.open()})),o.addEventListener("click",(()=>{I.resetValidation(),y.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,